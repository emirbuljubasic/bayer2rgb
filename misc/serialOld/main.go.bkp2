package main

import (
	"bufio"
	"fmt"
	"os"

	"github.com/tarm/serial"
)

const outputFileName = "rgbmap.csv"
const baudRate = 9600

func main() {
	info, err := os.Stdin.Stat()
	if err != nil {
		fmt.Printf("Error reading stdin: %v\n", err)
		return
	}

	var inputLines []string
	if info.Mode()&os.ModeCharDevice == 0 {
		scanner := bufio.NewScanner(os.Stdin)
		for scanner.Scan() {
			line := scanner.Text()
			inputLines = append(inputLines, line)
		}
		if err := scanner.Err(); err != nil {
			fmt.Printf("Error reading input: %v\n", err)
			return
		}
	} else {
		fmt.Println("Please provide input through redirection: ./main < file.txt")
		return
	}

	config := &serial.Config{
		Name: "/dev/ttyUSB0",
		Baud: baudRate,
	}
	port, err := serial.OpenPort(config)
	if err != nil {
		fmt.Printf("Failed to open port: %v\n", err)
		return
	}
	defer port.Close()

	outputFile, err := os.Create(outputFileName)
	if err != nil {
		fmt.Printf("Failed to create output file: %v\n", err)
		return
	}
	defer outputFile.Close()

	reader := bufio.NewReader(port)
	writer := bufio.NewWriter(outputFile)

	// Send the first 3 lines before receiving anything
	for i := 0; i < 3 && i < len(inputLines); i++ {
		sendLineAsChars(port, inputLines[i])
	}

	// Now receive one line, then send one, repeat
	for i := 3; i < len(inputLines); i++ {
		receivedLine, err := receiveLine(reader)
		if err != nil {
			fmt.Printf("Error receiving line: %v\n", err)
			break
		}
		fmt.Fprintln(writer, receivedLine)
		writer.Flush()

		sendLineAsChars(port, inputLines[i])
	}

	// Receive the last line after all sending is done
	receivedLine, err := receiveLine(reader)
	if err == nil {
		fmt.Fprintln(writer, receivedLine)
		writer.Flush()
	} else {
		fmt.Printf("Error receiving final line: %v\n", err)
	}

	fmt.Println("Finished communication and wrote to rgbmap.csv")
}

func sendLineAsChars(port *serial.Port, line string) {
	// Send the line as is, including commas
	fmt.Printf("Sending line: %s\n", line) // Print the line being sent

	_, err := port.Write([]byte(line))
	if err != nil {
		fmt.Printf("Error sending line: %v\n", err)
	} else {
		fmt.Printf("Successfully sent: %s\n", line)
	}
}

func receiveLine(reader *bufio.Reader) (string, error) {
	line, err := reader.ReadString('\n')
	if err != nil {
		return "", err
	}
	// line = strings.TrimSpace(line)
	fmt.Printf("Received: %s\n", line)
	return line, nil
}
